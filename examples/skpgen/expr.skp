% Expressions

{ 
  //         Precedence ──┬╮
  //      Right Assoc     ││
  //        (0x8000)      ││
  //                      ▼▼
  #define TOK_LOGIC_OR  0x0101
  #define TOK_LOGIC_AND 0x0201
  #define TOK_BITW_OR   0x0301
  #define TOK_BITW_XOR  0x0401
  #define TOK_BITW_AND  0x0501
  #define TOK_EQUAL     0x0601
  #define TOK_NOTEQUAL  0x0602
  #define TOK_LESSEQ    0x0701
  #define TOK_LESS      0x0702
  #define TOK_GREATEQ   0x0703 
  #define TOK_GREAT     0x0704
  #define TOK_SHIFLEFT  0x0801
  #define TOK_SHIFRIGHT 0x0802
  #define TOK_ADD       0x0901
  #define TOK_SUBTRACT  0x0902
  #define TOK_MULT      0x0A01
  #define TOK_DIV       0x0A02
  #define TOK_MOD       0x0A03
  #define TOK_POWER     0x8101

  #define isrightassociative(x) (((x) & 0x8000) != 0)

  skpfunc(op) {
    int len = 0;
    int32_t ret = 0;
    switch (*skpcur) {
      case '|' : if (skpcur[1] == '|') { len = 2; ret = TOK_LOGIC_OR;}
                 else { len = 1; ret = TOK_BITW_OR;}
                 break;
      case '&' : if (skpcur[1] == '&') { len = 2; ret = TOK_LOGIC_AND;}
                 else { len = 1; ret = TOK_BITW_AND;}
                 break;
      case '^' : len = 1; ret = TOK_BITW_XOR;
                 break;
      case '=' : if (skpcur[1] == '=') { len = 2; ret = TOK_EQUAL;}
                 break;
      case '!' : if (skpcur[1] == '=') { len = 2; ret = TOK_NOTEQUAL;}
                 break;
      case '<' : if (skpcur[1] == '=') { len = 2; ret = TOK_LESSEQ;}
                 else if (skpcur[1] == '<') { len = 2; ret = TOK_SHIFLEFT;}
                 else { len = 1; ret = TOK_LESS;}
                 break;
      case '>' : if (skpcur[1] == '=') { len = 2; ret = TOK_GREATEQ;}
                 else if (skpcur[1] == '>') { len = 2; ret = TOK_SHIFRIGHT;}
                 else { len = 1; ret = TOK_GREAT;}
                 break;
      case '+' : len = 1; ret = TOK_ADD;      break;
      case '-' : len = 1; ret = TOK_SUBTRACT; break;
      case '*' : if (skpcur[1] == '*') { len = 2; ret = TOK_POWER;}
                 else { len = 1; ret = TOK_MULT;}
                 break;
      case '/' : len = 1; ret = TOK_DIV;      break;
      case '%' : len = 1; ret = TOK_MOD;      break;
    }

    skpcur = len>0? skpcur+len : NULL;
    return ret;
  }

  void fixprec(ast_t astcur) // <-- use astcur to ensure continuity with parser
  {
    int32_t arg2;
    int32_t op2; 
    int32_t arg1;
    int32_t op1;

    if (ASTNULL == (arg2 = astlastnode))          return;
    if (ASTNULL == (op2  = astleft(astcur,arg2))) return;
    if (ASTNULL == (arg1 = astleft(astcur,op2)))  return;
    if (ASTNULL == (op1  = astleft(astcur,arg1))) return;
    astprint(astcur,stderr);
    fprintf(stderr,"\n");

    int getnext = 0;
    int32_t prec1, prec2;
    while (1) {
      getnext = 1;
      prec1 = (astnodeinfo(astcur,op1) & 0xFF00);
      prec2 = (astnodeinfo(astcur,op2) & 0xFF00);
      if ( (prec1 < prec2)
         || ((prec1 == prec2) && isrightassociative(prec1))) {
        astlower(astcur, term, arg1, arg2);
        op2 = astright(astcur, arg1);
        if (op2 != ASTNULL) {
          arg2 = astright(astcur,op2);
          getnext = 0;
        }
      }
      if (getnext) {
        arg2 = arg1;
        op2  = op1;
        if (ASTNULL == (arg1 = astleft(astcur,op2)))  return;
        if (ASTNULL == (op1  = astleft(astcur,arg1))) return;
      }
    }
  }
}

expr =  _term ( _spc_ op[] _term  )* {?fixprec(astcur); } ;

term = _spc_  ( assign #4
              / varref 
              / number
              / _"'(' *s" expr _"*s ')'"
              / unopterm
              );

unopterm = _"'+'\1 '-'\2 '!'\3" #? ^^term;

varref = #16 _"'++'\2 '--'\3" #? lvalue
       / lvalue _spc_ (_"'++'\4 '--'\5" #? )?
       ;

lvalue = _spc_ "I" varindex? ;

varindex = _"*s '[' *s" ^^array_index _"*s']'" #?20 /
           _"'.'" lvalue #?30 / _"*s '->' *s" lvalue #?40;

array_index = ^^expr;

assign = varref _spc_ assign_op  _spc_ ^^expr;
assign_op = #2 (_"[&!^%/+*-]\1'>>'\1'<<'" #?)? _"=" ;

number = _"'0' [xX] X\7" #?/ _"F\6" #?;

unaryop = _"[*!~-]";
spc_ = _"*s\1'%%' N";

